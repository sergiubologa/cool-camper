{"version":3,"sources":["polyfills/match-media.js","serviceWorker.js","components/scroll-to-top/index.js","index.js"],"names":["window","matchMedia","matches","Boolean","location","hostname","match","ScrollToTop","prevProps","this","props","pathname","scrollTo","children","React","Component","withRouter","smoothscroll","polyfill","AsyncHome","lazy","AsyncBooking","AsyncTermsAndConditions","AsyncCookies","AsyncPrivacyPolicy","AsyncCancelBooking","AsyncTechDetails","AsyncNotFound","rootElement","document","getElementById","ConcurrentMode","unstable_ConcurrentMode","Root","fallback","maxDuration","exact","path","component","ReactDom","unstable_createRoot","hydrate","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"okDAAgBA,OAAOC,WACrBD,OAAOC,YACN,iBAAO,CACNC,SAAS,I,+CCSOC,QACW,cAA7BH,OAAOI,SAASC,UAEe,UAA7BL,OAAOI,SAASC,UAEhBL,OAAOI,SAASC,SAASC,MACvB,2D,0DCfAC,E,2LACeC,GACbC,KAAKC,MAAMN,SAASO,WAAaH,EAAUJ,SAASO,UACtDX,OAAOY,SAAS,EAAG,K,+BAKrB,OAAOH,KAAKC,MAAMG,a,GARIC,IAAMC,WAYjBC,cAAWT,G,cCE1BU,IAAaC,WAEb,IAAMC,EAAYL,IAAMM,MAAK,kBAAM,qEAC7BC,EAAeP,IAAMM,MAAK,kBAAM,qEAChCE,EAA0BR,IAAMM,MAAK,kBAAM,+DAC3CG,EAAeT,IAAMM,MAAK,kBAAM,+DAChCI,EAAqBV,IAAMM,MAAK,kBAAM,+DACtCK,EAAqBX,IAAMM,MAAK,kBAAM,+DACtCM,EAAmBZ,IAAMM,MAAK,kBAAM,8DACpCO,EAAgBb,IAAMM,MAAK,kBAAM,+DA4BjCQ,EAAcC,SAASC,eAAe,QACtCC,EAAiBjB,IAAMkB,wBACvBC,EACJ,kBAACF,EAAD,KACE,kBAAC,WAAD,CAAUG,SAAU,KAAMC,YAAa,KACrC,mBA/BM,kBACV,kBAAC,IAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWnB,IACjC,kBAAC,IAAD,CAAOkB,KAAK,wBAAwBC,UAAWjB,IAC/C,kBAAC,IAAD,CAAOgB,KAAK,qBAAqBC,UAAWb,IAC5C,kBAAC,IAAD,CACEY,KAAK,uBACLC,UAAWhB,IAEb,kBAAC,IAAD,CAAOe,KAAK,uBAAuBC,UAAWf,IAC9C,kBAAC,IAAD,CACEc,KAAK,8BACLC,UAAWZ,IAEb,kBAAC,IAAD,CACEW,KAAK,iCACLC,UAAWd,IAEb,kBAAC,IAAD,CAAOc,UAAWX,SAWpB,QAMOY,IAASC,oBAAoBZ,EAAa,CAAEa,SAAS,IAC7DC,OAAOT,GF+DN,kBAAmBU,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.a70fac38.chunk.js","sourcesContent":["export default (window.matchMedia =\n  window.matchMedia ||\n  (() => ({\n    matches: false\n  })));\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport { withRouter } from \"react-router-dom\";\n\nclass ScrollToTop extends React.Component {\n  componentDidUpdate(prevProps) {\n    if (this.props.location.pathname !== prevProps.location.pathname) {\n      window.scrollTo(0, 0);\n    }\n  }\n\n  render() {\n    return this.props.children;\n  }\n}\n\nexport default withRouter(ScrollToTop);\n","import { smoothscroll } from \"./polyfills\";\nimport React, { Suspense } from \"react\";\nimport ReactDom from \"react-dom\";\nimport \"normalize.css\";\nimport \"./styles/evie-theme.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport ScrollToTop from \"./components/scroll-to-top\";\nimport \"moment/locale/ro\";\nimport \"autotrack\";\n\n// Disable GA for non-prod environments\nif (process.env.NODE_ENV !== \"production\") {\n  window[\"ga-disable-UA-132033324-1\"] = true;\n}\n\n// Run polyfills\nsmoothscroll.polyfill();\n\nconst AsyncHome = React.lazy(() => import(\"./pages/home\"));\nconst AsyncBooking = React.lazy(() => import(\"./pages/booking\"));\nconst AsyncTermsAndConditions = React.lazy(() => import(\"./pages/terms\"));\nconst AsyncCookies = React.lazy(() => import(\"./pages/cookies\"));\nconst AsyncPrivacyPolicy = React.lazy(() => import(\"./pages/privacy\"));\nconst AsyncCancelBooking = React.lazy(() => import(\"./pages/cancel-booking\"));\nconst AsyncTechDetails = React.lazy(() => import(\"./pages/technical-details\"));\nconst AsyncNotFound = React.lazy(() => import(\"./pages/not-found\"));\n\nconst App = () => (\n  <Router>\n    <ScrollToTop>\n      <Switch>\n        <Route exact path=\"/\" component={AsyncHome} />\n        <Route path=\"/rezervare-autorulota\" component={AsyncBooking} />\n        <Route path=\"/anulare-rezervare\" component={AsyncCancelBooking} />\n        <Route\n          path=\"/termeni-si-conditii\"\n          component={AsyncTermsAndConditions}\n        />\n        <Route path=\"/politica-de-cookies\" component={AsyncCookies} />\n        <Route\n          path=\"/detalii-tehnice-autorulota\"\n          component={AsyncTechDetails}\n        />\n        <Route\n          path=\"/politica-de-confidentialitate\"\n          component={AsyncPrivacyPolicy}\n        />\n        <Route component={AsyncNotFound} />\n      </Switch>\n    </ScrollToTop>\n  </Router>\n);\n\nconst rootElement = document.getElementById(\"root\");\nconst ConcurrentMode = React.unstable_ConcurrentMode;\nconst Root = (\n  <ConcurrentMode>\n    <Suspense fallback={null} maxDuration={5000}>\n      <App />\n    </Suspense>\n  </ConcurrentMode>\n);\n\n// hydrate\nconst root = ReactDom.unstable_createRoot(rootElement, { hydrate: true });\nroot.render(Root);\n\n// Hack to fix different versions between hydrate and render\n// source: https://github.com/stereobooster/react-async-issue\n// re-render\n// const root = ReactDom.unstable_createRoot(rootElement);\n// const callback = rootElement.hasChildNodes()\n//   ? () => rootElement.removeChild(rootElement.firstChild)\n//   : () => {};\n// root.render(Root, callback);\n\n// if (rootElement.hasChildNodes()) {\n//   hydrate(LazyApp, rootElement);\n// } else {\n//   render(LazyApp, rootElement);\n// }\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}